#!/usr/bin/env ruby

# Usage:
#   cd directory-of-book
#   ../bin/generate --epub --mobi --pdf
#
# Expected files in directory-of-book:
#   * manifest.json
#   * cover-A4.png
#   * cover-A5.png
#   * originals/chapter-file-n.md
#
# manifest.json:
#
#   {
#     "title": "Book Title",
#     "date": "00th June 2020",
#     "chapters": [
#       {
#         "title": "Chapter Title n",
#         "date": "00th June 2020",
#         "authors": [
#           {
#             "name": "Author Name",
#             "url": "https://some.place.online"
#           }
#         ],
#         "content": "chapter-file-n.md"
#       }
#     ]
#   }

require 'rubygems'
require 'bundler'
Bundler.require(:default)

require 'date'
require 'json'
require 'pp'
require 'fileutils'
require 'yaml'

module Helpers
  def log(msg)
    puts "[nsbooks] #{msg}"
  end

  def dir
    Dir.pwd
  end

  def dirname
    dir.split('/').last
  end
end

class Book < Struct.new(:title, :date)
  include Helpers

  def self.from_manifest(manifest)
    book = new(
      manifest['title'],
      Date.parse(manifest['date'])
    )
    manifest['chapters'].sort_by { |c| Date.parse(c['date']) }.each.with_index do |c, i|
      book.chapters << Chapter.new(i+1, c['title'], c['date'], c['authors'], c['content'])
    end
    book
  end

  def readable_year
    date.strftime('%Y')
  end

  def readable_date
    date.strftime('%-d %B %Y')
  end

  def chapters
    @chapters ||= []
  end

  def author_names
    chapters.map(&:authors).flatten.map { |a|
      a['name']
    }.uniq.reject { |n| n == 'The Editors' }.sort_by { |n| n.split(' ')[1] }
  end

  def compile
    chapters.each(&:compile)
  end
end

class Chapter < Struct.new(:num, :title, :date, :authors, :content)
  include Helpers

  def copy
    FileUtils.mkdir_p(File.join(dir, 'compiled'))
    FileUtils.cp(original_path, compiled_path)
  end

  def fix_title_and_author
    content = File.read(compiled_path)
    raise authors.inspect if authors.nil?
    auth = authors.map { |a| "[#{a['name']}](#{a['url']})" }.join(' and ')
    insert = "# #{title}\n\n**#{auth}**\n\n"
    File.open(compiled_path, 'w+') do |f|
      f << insert
      f << content
    end
  end

  def fix_footnotes
    `pandoc #{compiled_path} --to markdown --id-prefix=chapter-#{num}- -o #{compiled_path}`
  end

  def compile
    copy
    fix_title_and_author
    fix_footnotes
  end

  def original_path
    File.join(dir, 'original', content)
  end

  def compiled_path
    File.join(dir, 'compiled', content)
  end
end

class EpubWriter
  include Helpers

  def initialize(book)
    @book = book
  end

  def write_meta
    File.open File.join(dir, 'meta.yml'), 'w+' do |f|
      f << YAML.dump(
        'title' => [{ 'type' => 'main', 'text' => @book.title }],
        'creator' =>  @book.author_names.map { |a| { 'role' => 'author', 'text' => a } },
        'publisher' => 'New Socialist',
        'rights' => "Â© #{@book.readable_year} New Socialist",
        'lang' => 'en-GB',
        'date' => @book.readable_date,
        'cover-image' => File.join(dir, 'cover-A5.png')
      )
      f << '...'
    end
  end

  def write_book
    log "Writing epub"

    css   = File.expand_path(File.join('../..', 'css', 'style.css'), __FILE__)
    file  = File.join(dir, "#{dirname}.epub")
    meta  = File.join(dir, 'meta.yml')

    `pandoc --epub-embed-font="/Users/joe/Library/Fonts/Merriweather-Regular.ttf" \
        --epub-embed-font=""/Users/joe/Library/Fonts/Lato-Bold.ttf \
        --epub-stylesheet=#{css} \
        --toc \
        --toc-depth=1 \
        -S \
        -o #{file} \
        #{meta} #{@book.chapters.map(&:compiled_path).join ' '}`
  end

  def call
    write_meta
    write_book
  end
end

class PdfWriter
  include Helpers

  def initialize(book)
    @book = book
  end

  def call
    log "Writing pdf"

    file = File.expand_path(File.join('../..', dirname, "#{dirname}.pdf"), __FILE__)

    `pandoc -H ../includes/header.tex \
        -V subparagraph \
        -V urlcolor=LightSlateGrey \
        -V mainfont=Merriweather \
        -V sansfont=Lato \
        -V fontsize=13pt \
        -V linkcolor=LightSlateGrey \
        -V linestretch=1.1 \
        -V documentclass=extreport \
        -V geometry:a4paper \
        --top-level-division=chapter \
        --latex-engine=xelatex \
        --toc \
        --toc-depth=1 \
        -o #{file} \
        #{@book.chapters.map(&:compiled_path).join ' '}`
  end
end

class MobiWriter
  include Helpers

  def call
    log "Writing mobi"
    `kindlegen #{dirname}.epub -o #{dirname}.mobi`
  end
end

opts = Slop.parse do |o|
  o.boolean '--help', 'help'
  o.boolean '--compile', 'compile all markdown posts', default: true
  o.boolean '--epub', 'write epub', default: false
  o.boolean '--pdf', 'write pdf', default: false
  o.boolean '--mobi', 'write mobi', default: false
end

puts opts and exit(0) if opts[:help]

begin
  manifest = JSON.parse(File.read('./manifest.json'))
  book = Book.from_manifest(manifest)
    
  book.compile if opts[:compile]

  EpubWriter.new(book).call if opts[:epub]
  PdfWriter.new(book).call if opts[:pdf]
  MobiWriter.new.call if opts[:mobi]
rescue => e
  puts e
  raise
end
