#!/usr/bin/env ruby

require 'rubygems'
require 'bundler'
Bundler.require(:default)

require 'date'
require 'json'
require 'pp'
require 'fileutils'

module Helpers
  def log(msg)
    puts "[nsbooks] #{msg}"
  end

  def dir
    Dir.pwd
  end

  def dirname
    dir.split('/').last
  end
end

class Book < Struct.new(:title, :date, :cover)
  include Helpers

  def self.from_manifest(manifest)
    book = new(
      manifest['title'],
      manifest['date'],
      manifest['cover']
    )
    manifest['chapters'].each.with_index do |c, i|
      book.chapters << Chapter.new(i+1, c['title'], c['authors'], c['content'])
    end
    book
  end

  def chapters
    @chapters ||= []
  end
end

class Chapter < Struct.new(:num, :title, :authors, :content)
  include Helpers

  def compile
    `pandoc #{content} --to markdown --id-prefix=post-#{num}- -o #{content}`
  end
end

class EpubWriter
  include Helpers

  def initialize(book)
    @book = book
  end

  def write_title
    log "Writing epub title"

    File.open File.join(dir, 'title.txt'), 'w+' do |f|
      f << "% #{@book.title}\n% New Socialist\n% #{@book.date}"
    end
  end

  def write_book
    log "Writing epub"

    css   = File.expand_path(File.join('../..', 'css', 'style.css'), __FILE__)
    file  = File.expand_path(File.join(dir, "#{dirname}.epub"), __FILE__)
    meta  = File.expand_path(File.join(dir, 'meta.xml'), __FILE__)
    cover = File.expand_path(File.join(dir, @book.cover), __FILE__)
    title = File.join(dir, 'title.txt')

    `pandoc --epub-metadata=#{meta} --epub-cover-image=#{cover} --epub-stylesheet=#{css} --toc --toc-depth=1 -S -o #{file} #{title} #{@book.chapters.map(&:content).join ' '}`
  end

  def call
    write_title
    write_book
  end
end

class PdfWriter
  include Helpers

  def initialize(filename, title)
    @filename, @title = filename, title
  end

  def call
    log "Writing pdf"
    file = File.expand_path(File.join('../..', @filename, "#{@filename}.pdf"), __FILE__)
    `pandoc -H includes/header.tex \
        -V subparagraph \
        -V urlcolor=red \
        -V mainfont="Helvetica" \
        -V sansfont="Helvetica" \
        -V fontsize=14pt \
        -V linestretch=1.1 \
        -V documentclass=extreport \
        -V geometry:a4paper \
        --top-level-division=chapter \
        --toc --toc-depth=1 \
        --latex-engine=xelatex \
        -o #{file}  #{chapters.join ' '}`
  end
end

class MobiWriter
  include Helpers

  def initialize(filename)
    @filename = filename
  end

  def call
    log "Writing mobi"
    `kindlegen #{@filename}/#{@filename}.epub -o #{@filename}.mobi`
  end
end

opts = Slop.parse do |o|
  o.string '--title', 'title'
  o.string '--filename', 'filename without extension'
  o.boolean '--help', 'help'
  o.boolean '--compile', 'compile all markdown posts', default: true
  o.boolean '--epub', 'write epub', default: false
  o.boolean '--pdf', 'write pdf', default: false
  o.boolean '--mobi', 'write mobi', default: false
end

puts opts and exit(0) if opts[:help]

begin
  manifest = JSON.parse(File.read('./manifest.json'))
  book = Book.from_manifest(manifest)
    
  book.chapters.each(&:compile) if opts[:compile]
  EpubWriter.new(opts[:filename], opts[:title]).call if opts[:epub]
  PdfWriter.new(opts[:filename], opts[:title]).call if opts[:pdf]
  MobiWriter.new(opts[:filename]).call if opts[:mobi]
rescue => e
  puts e
  exit 1
end
